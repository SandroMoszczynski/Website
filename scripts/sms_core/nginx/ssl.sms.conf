upstream app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response

  # for UNIX domain socket setups
  server unix:/tmp/gunicorn.sock fail_timeout=0;

  # for a TCP configuration
  # server 192.168.0.7:8000 fail_timeout=0;
}

server {
  client_max_body_size 4G;

  # set the correct host(s) for your site ('_' works for all sites if using HTTP default_server directive)
  server_name FULLY_QUALIFIED_URL;

  keepalive_timeout 5;

  # path for static files
  root ROOT_DIR/sms_core;

  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_app;
  }

  location @proxy_to_app {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://app_server;
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root ROOT_DIR/sms_core/static;
  }


  # HTTPS server (requires certificate be installed, sample config below generated by Certbot for let's encrypt)
  listen 443 ssl; # managed by Certbot
  ssl_certificate RM_CERT; # managed by Certbot
  ssl_certificate_key RM_KEY; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
  if ($host = www.FULLY_QUALIFIED_URL) {
      return 301 https://FULLY_QUALIFIED_URL$request_uri;
  } # managed by Certbot

  if ($host = FULLY_QUALIFIED_URL) {
      return 301 https://$host$request_uri;
  } # managed by Certbot

  server_name FULLY_QUALIFIED_URL www.FULLY_QUALIFIED_URL;

  keepalive_timeout 5;
  listen 80;
  return 404; # managed by Certbot
}
